"""class for the user.
This class allow us to have the user object that contains
all the things we need to work with it and its friends.
Users are object used in the main_sim.py as nodes of the network.
"""

from collections import deque
import pandas as pd
import random
import message


class User:
    def __init__(
        self,
        user_index: int,
        user_id: str,
        user_class: str,
        friends: list = [],
        followers: list = [],
    ) -> None:
        self.user_index = user_index  # this is the node index of the user in the graph
        self.user_id = user_id
        self.user_class = user_class
        user_description = []
        self.shared_messages = []
        self.reshared_messages = []
        self.n_actions = 0
        self.is_suspended = False
        self.is_shadow = False
        self.user_feed = deque(maxlen=10)
        self.last_message = None
        self.friends = friends
        self.followers = followers
        self.mu = 0.5

        for _ in range(random.randrange(1, 6)):
            user_description.append(random.randrange(0, 5))
        self.user_description = list(set(user_description))

    def perform_action(
        self,
        message_id: str,
        is_shadow: bool,
        quality_params: tuple = (0.5, 0.15, 0, 1),
    ) -> None:
        """function that is responsible for routing the action between new action and re-sharing.
        The choice is made according to the mu parameter and the user's feed, which must contain at least one message

        Args:
            message_id (str): message_id from the main_sim, is a combination of
            user_id and a specific index
            is_shadow (bool): flag to check if the user is under shadow-ban
            quality_params (tuple, optional): params to get the quality from the beta.
            Defaults to (0.5, 0.15, 0, 1).
        """
        if len(self.user_feed) > 0 and random.random() > self.mu:
            self.reshare_message(message_id, is_shadow)
        else:
            self.post_message(message_id, is_shadow, quality_params)

    def reshare_message(
        self,
        message_id: str,
        is_shadow: bool,
    ) -> None:
        """function to reshare a message, a message is chosen at random within the user's feed.
        A new message is created, taking the attributes (appeal and quality) of the old message,
        the first reshare and the following parents (id and user_id) are kept track of.

        Args:
            message_id (str): message_id from the main_sim, is a combination of
            user_id and a specific index
            is_shadow (bool): flag to check if the user is under shadow-ban
        """
        target = random.sample(list(self.user_feed), 1)[0]
        message_reshared = message.Message(
            id=message_id,
            user_id=self.user_id,
            quality_params=None,
            topic=target.topic,
            is_shadow=is_shadow,
        )
        message_reshared.quality = target.quality
        message_reshared.appeal = target.appeal
        # If it's not the first reshare we get the attributes
        if pd.notna(target.reshared_id):
            message_reshared.reshared_original_id = target.reshared_original_id
            message_reshared.reshared_id = target.id
        else:
            # If it's the first reshare reshared_original_id and reshared_id are the same
            message_reshared.reshared_id = target.id
            message_reshared.reshared_original_id = target.id
        message_reshared.reshared_user_id = target.user_id
        self.reshared_messages.append(message_reshared)
        self.n_actions += 1
        self.last_message = message_reshared

    def post_message(
        self,
        message_id: str,
        is_shadow: bool,
        quality_params: tuple = (0.5, 0.15, 0, 1),
    ) -> None:
        """function to post a message, since the feed of the user
        has a specific size (e.g. 10) the module is used to place the
        message in a specific position

        Args:
            message_id (str): message_id from the main_sim, is a combination of
            user_id and a specific index
            is_shadow (bool): flag to check if the user is under shadow-ban
            quality_params (tuple, optional): params to get the quality from the beta.
            Defaults to (0.5, 0.15, 0, 1).
        """
        message_created = message.Message(
            id=message_id,
            user_id=self.user_id,
            topic=random.choice(self.user_description),
            is_shadow=is_shadow,
            quality_params=quality_params,
        )
        self.shared_messages.append(message_created)
        self.n_actions += 1
        self.last_message = message_created

    def add_clock(self, time: float):
        """function to add the time generated by the clock,
        in the process 1 (agent_process_manager)

        Args:
            time (float): delta time generated by the clock
        """
        self.last_message.time = time

    def __str__(self) -> str:
        return "\n".join(
            [
                f"User id: {self.user_id}",
                f"- Number of shared: {len(self.shared_messages)}",
                f"- Number of reshared: {len(self.reshared_messages)}",
                f"- Number of actions: {self.n_actions}",
                f"- Shadow status:  {self.is_shadow}",
                f"- Suspension status: {self.is_suspended}",
                f"- Feed: {self.user_feed}",
                f"- Friends: {self.friends}",
                f"- Followers: {self.followers}",
                f"- Description: {self.user_description}",
            ]
        )
