"""class for the user.
This class allow us to have the user object that contains
all the things we need to work with it and its friends.
Users are object used in the main_sim.py as nodes of the network.
"""

import random
import message
from collections import deque


class User:
    def __init__(
        self,
        user_index: int,
        user_id: str,
        user_class: str,
        friends: list = [],
        followers: list = [],
    ) -> None:
        self.user_index = user_index  # this is the node index of the user in the graph
        self.user_id = user_id
        self.user_class = user_class
        user_description = []
        self.shared_messages = []
        self.is_suspended = False
        self.is_shadow = False
        self.user_feed = deque(maxlen=10)
        self.last_message = None
        self.friends = friends
        self.followers = followers

        for _ in range(random.randrange(1, 6)):
            user_description.append(random.randrange(0, 5))
        self.user_description = list(set(user_description))

    def create_post(
        self,
        message_id: int,
        is_shadow: bool,
        quality_params: tuple = (0.5, 0.15, 0, 1),
    ) -> None:
        """function to create a message, since the feed of the user
        has a specific size (e.g. 10) the module is used to place the
        message in a specific position

        Args:
            message_id (int): message_id from the main_sim, is a combination of
            user_id and a specific index
            quality_params (tuple, optional): params to get the quality from the beta.
            Defaults to (0.5, 0.15, 0, 1).
        """
        message_created = message.Message(
            id=message_id,
            user_id=self.user_id,
            topic=random.choice(self.user_description),
            is_shadow=is_shadow,
            quality_params=quality_params,
        )
        self.shared_messages.append(message_created)
        self.last_message = message_created

    def add_clock(self, time: float):
        """function to add the time generated by the clock,
        in the process 1 (agent_process_manager)

        Args:
            time (float): delta time generated by the clock
        """
        self.last_message.time = time

    def __str__(self) -> str:
        return "\n".join(
            [
                f"User id: {self.user_id}",
                f"- Number of shared: {len(self.shared_messages)}",
                f"- Shadow status:  {self.is_shadow}",
                f"- Suspension status: {self.is_suspended}",
                f"- Feed: {self.user_feed}",
                f"- Friends: {self.friends}",
                f"- Description: {self.user_description}",
            ]
        )
